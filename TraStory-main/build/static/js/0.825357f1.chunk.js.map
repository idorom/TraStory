{"version":3,"sources":["../node_modules/screw-filereader/index.js"],"names":["Blob","console","warn","blob","prototype","fullStreamSupport","basicStreamSupport","fetchTransform","URL","window","webkitURL","promisify","obj","Promise","resolve","reject","onload","onerror","evt","type","result","Error","toImage","url","img","Image","src","getRotation","buffer","view","DataView","getUint16","length","byteLength","offset","marker","getUint32","little","tags","i","fixRotation","slice","arrayBuffer","then","angle","dataURL","width","height","canvas","document","createElement","ctx","getContext","revokeObjectURL","transform","drawImage","toBlob","rotate","ReadableStream","e","Response","getReader","fr","FileReader","readAsArrayBuffer","this","text","readAsText","readAsDataURL","createObjectURL","json","JSON","parse","image","preventRevoke","stream","position","autoAllocateChunkSize","pull","controller","v","byobRequest","uint8array","Uint8Array","bytesRead","set","respond","size","close","enqueue","body"],"mappings":"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","file":"static/js/0.825357f1.chunk.js","sourcesContent":[";(function() {\n\n  if(typeof Blob === 'undefined')\n    return console.warn('Screw-FileReader is only meant to work in those' +\n  'engine who already has some basic support for blob')\n\n  var blob = Blob.prototype\n  var fullStreamSupport = false\n  var basicStreamSupport = false\n  var fetchTransform = false\n  var URL = window.URL || window.webkitURL\n\n  function promisify(obj) {\n    return new Promise(function(resolve, reject) {\n      obj.onload =\n      obj.onerror = function(evt) {\n        obj.onload =\n        obj.onerror = null\n\n        evt.type === 'load'\n          ? resolve(obj.result || obj)\n          : reject(new Error('Failed to read the blob/file'))\n      }\n    })\n  }\n\n  function toImage(url) {\n    var img = new Image\n    img.src = url\n    return promisify(img)\n  }\n\n  function getRotation(buffer) {\n    var view = new DataView(buffer)\n\n    if (view.getUint16(0, false) != 0xFFD8) return -2\n\n    var length = view.byteLength\n    var offset = 2\n\n    while (offset < length) {\n      var marker = view.getUint16(offset, false)\n      offset += 2\n\n      if (marker == 0xFFE1) {\n        if (view.getUint32(offset += 2, false) != 0x45786966) {\n          return -1\n        }\n        var little = view.getUint16(offset += 6, false) == 0x4949\n        offset += view.getUint32(offset + 4, little)\n        var tags = view.getUint16(offset, little)\n        offset += 2\n\n        for (var i = 0; i < tags; i++)\n          if (view.getUint16(offset + (i * 12), little) == 0x0112)\n\n        return view.getUint16(offset + (i * 12) + 8, little);\n      }\n      else if ((marker & 0xFF00) != 0xFF00) break\n      else offset += view.getUint16(offset, false)\n    }\n\n    return -1\n  }\n\n  function rotate(img, angle) {\n    var width = img.width\n    var height = img.height\n    var canvas = document.createElement('canvas')\n    var ctx = canvas.getContext('2d')\n\n    // revoke memory\n    URL.revokeObjectURL(img.src)\n\n    // set proper canvas dimensions before transform & export\n    if (angle > 4 && angle < 9) {\n      canvas.width = height\n      canvas.height = width\n    } else {\n      canvas.width = width\n      canvas.height = height\n    }\n\n    // transform context before drawing image\n    switch (angle) {\n        case 2: ctx.transform(-1, 0, 0, 1, width, 0); break\n        case 3: ctx.transform(-1, 0, 0, -1, width, height ); break\n        case 4: ctx.transform(1, 0, 0, -1, 0, height ); break\n        case 5: ctx.transform(0, 1, 1, 0, 0, 0); break\n        case 6: ctx.transform(0, 1, -1, 0, height , 0); break\n        case 7: ctx.transform(0, -1, -1, 0, height , width); break\n        case 8: ctx.transform(0, -1, 1, 0, 0, width); break\n    }\n\n    // draw image\n    ctx.drawImage(img, 0, 0)\n\n    // export blob\n    return new Promise(function (resolve) {\n      canvas.toBlob(resolve)\n    })\n  }\n\n  function fixRotation(blob) {\n    // read only the headers\n    return blob.slice(0, 65536)\n    .arrayBuffer()\n    .then(getRotation)\n    .then(function (angle) {\n      // get a image object\n      return Promise.resolve(blob.url() || blob.dataURL())\n      .then(toImage)\n      .then(function(img) {\n        // return img unless it needs rotation\n        return angle < 2 ? img :\n          // rotate the image\n          rotate(img, angle).then(function (blob) {\n            return blob.url() || blob.dataURL()\n          }).then(toImage)\n      })\n    })\n  }\n\n  try {\n    new ReadableStream({})\n    basicStreamSupport = true\n  } catch (e) {}\n\n  try {\n    new ReadableStream({type: 'bytes'})\n    fullStreamSupport = true\n  } catch (e) {}\n\n  try {\n    (new Response(new Blob)).getReader()\n    fetchTransform = true\n  } catch (e) {}\n\n  if (!blob.arrayBuffer) {\n    blob.arrayBuffer = function arrayBuffer() {\n      var fr = new FileReader\n      fr.readAsArrayBuffer(this)\n      return promisify(fr)\n    }\n  }\n\n  if (!blob.text) {\n    blob.text = function text() {\n      var fr = new FileReader\n      fr.readAsText(this)\n      return promisify(fr)\n    }\n  }\n\n  if (!blob.dataURL) {\n    blob.dataURL = function dataURL() {\n      var fr = new FileReader\n      fr.readAsDataURL(this)\n      return promisify(fr)\n    }\n  }\n\n  if (!blob.url) {\n    blob.url = function url() {\n      return URL ? URL.createObjectURL(this) : null\n    }\n  }\n\n  if (!blob.json) {\n    blob.json = function json() {\n      return this.text().then(JSON.parse)\n    }\n  }\n\n  if (!blob.image) {\n    blob.image = function image(preventRevoke) {\n      return fixRotation(this)\n      .then(function(img) {\n        !preventRevoke && URL.revokeObjectURL(img.src)\n        return img\n      })\n    }\n  }\n\n  if (!blob.stream) {\n    blob.stream =\n\n    fullStreamSupport ? function stream() {\n      var position = 0\n      var blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        autoAllocateChunkSize: 524288,\n\n        pull: function (controller) {\n          var v = controller.byobRequest.view\n          var chunk = blob.slice(position, position + v.byteLength)\n          return chunk.arrayBuffer()\n          .then(function (buffer) {\n            var uint8array = new Uint8Array(buffer)\n            var bytesRead = uint8array.byteLength\n\n            position += bytesRead\n            v.set(uint8array)\n              controller.byobRequest.respond(bytesRead)\n\n            if(position >= blob.size)\n              controller.close()\n          })\n        }\n      })\n    }:\n\n    // basic stream support\n    basicStreamSupport ? function stream(blob){\n      var position = 0\n      var blob = this\n\n      return new ReadableStream({\n        pull: function (controller) {\n          var chunk = blob.slice(position, position + 524288)\n\n          return chunk.arrayBuffer().then(function (buffer) {\n            position += buffer.byteLength\n            var uint8array = new Uint8Array(buffer)\n            controller.enqueue(uint8array)\n\n            if(position == blob.size)\n              controller.close()\n          })\n        }\n      })\n    }:\n\n    // fetchTransform\n    fetchTransform ? function stream() {\n      return (new Response(this)).body\n    }:\n\n    function stream() {\n      throw new Error('Include https://github.com/creatorrr/web-streams-polyfill')\n    }\n  }\n\n}());\n"],"sourceRoot":""}